{"version":3,"sources":["appRedux/actions/Patient.js","routes/SamplePage/PatientList.js"],"names":["addPatient","values","dispatch","a","type","FETCH_START","axios","post","PROD","FETCH_SUCCESS","message","success","errors","response","data","error","console","log","getPatients","get","res","GET_ALL_PATIENTS","payload","addToConvo","id","name","conditions","allConditions","map","index","push","getConvoList","GET_CONVO_LIST","startingConversation","CARE_PLAN_FOR_PATIENT","getConversation","adminId","patientId","CONVO_PATIENT_ADMIN","addConversation","messageFrom","suggestionAdd","Suggestion","getSuggestions","SUGGESTIONS_PATIENT_ADMIN","columns","title","dataIndex","key","render","Conditions","tag","color","length","toUpperCase","PatientList","useDispatch","patients","useSelector","patient","loading","common","useEffect","dataSource"],"mappings":"+eAqBaA,EAAa,SAAAC,GAAM,8CAAI,WAAMC,GAAN,eAAAC,EAAA,sEAG5BD,EAAS,CAAEE,KAAMC,MAHW,SAKVC,IAAMC,KAAN,UAAcC,IAAd,uBAAyCP,GAL/B,gBAWxBC,EAAS,CAAEE,KAAMK,MACjBC,IAAQC,QAAQ,kBAZQ,gDAetBC,EAAS,KAAIC,SAASC,KAC5BJ,IAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAlBE,yDAAJ,uDAwBnBM,EAAc,SAAAjB,GAAM,8CAAI,WAAMC,GAAN,mBAAAC,EAAA,sEAG7BD,EAAS,CAAEE,KAAMC,MAHY,SAKXC,IAAMa,IAAN,UAAaX,IAAb,4BALW,QAKvBY,EALuB,UAWzBlB,EAAS,CAAEE,KAAMK,MACjBP,EAAS,CAAEE,KAAMiB,IAAkBC,QAASF,EAAIN,QAZvB,gDAevBF,EAfuB,sCAed,KAAKC,gBAfS,aAed,EAAeC,KAC9BJ,IAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAlBG,yDAAJ,uDAuBpBW,EAAa,SAACC,EAAIC,EAAMC,GAAX,8CAA0B,WAAMxB,GAAN,qBAAAC,EAAA,sEAG5CD,EAAS,CAAEE,KAAMC,MAEbsB,EAAgB,GACpBD,EAAWE,KAAI,SAACd,EAAMe,GAAP,OAEXF,EAAcG,KAAKhB,MAIjBb,EAAS,CACX,OAAUuB,EACV,YAAeC,EACf,WAAcE,GAf0B,SAmB1BrB,IAAMC,KAAN,UAAcC,IAAd,8BAAgDP,GAnBtB,gBAyBxCC,EAAS,CAAEE,KAAMK,MACjBP,EAAS6B,KACTrB,IAAQC,QAAQ,kBA3BwB,kDA8BtCC,EA9BsC,sCA8B7B,KAAKC,gBA9BwB,aA8B7B,EAAeC,KAC9BJ,IAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAjCkB,0DAA1B,uDAwCbmB,EAAe,SAAA9B,GAAM,8CAAI,WAAMC,GAAN,mBAAAC,EAAA,sEAG9BD,EAAS,CAAEE,KAAMC,MAHa,SAKZC,IAAMa,IAAN,UAAaX,IAAb,iCALY,QAKxBY,EALwB,UAW1BlB,EAAS,CAAEE,KAAMK,MACjBP,EAAS,CAAEE,KAAM4B,IAAgBV,QAASF,EAAIN,QAZpB,gDAexBF,EAfwB,sCAef,KAAKC,gBAfU,aAef,EAAeC,KAC9BJ,IAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAlBI,yDAAJ,uDAuBrBqB,EAAuB,SAAAT,GAAE,8CAAI,WAAMtB,GAAN,qBAAAC,EAAA,sEAGlCD,EAAS,CAAEE,KAAMC,MAHiB,SAKhBC,IAAMC,KAAN,UAAcC,IAAd,8BAAgD,CAAEgB,OALlC,QAK5BJ,EAL4B,UAQ9BlB,EAAS,CAAEE,KAAMK,MAEjBP,EAAS,CAAEE,KAAM8B,IAAuBZ,QAASF,EAAIN,QAVvB,gDAa5BF,EAb4B,sCAanB,KAAKC,gBAbc,iBAanB,EAAeC,YAbI,aAanB,EAAqBJ,QACpCA,IAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAhBQ,yDAAJ,uDAqBzBuB,EAAkB,SAACC,EAASC,GAAV,8CAAwB,WAAMnC,GAAN,qBAAAC,EAAA,sEAG/CD,EAAS,CAAEE,KAAMC,MAH8B,SAK7BC,IAAMC,KAAN,UAAcC,IAAd,4BAA8C,CAAE4B,UAASC,cAL5B,QAKzCjB,EALyC,UAQ3ClB,EAAS,CAAEE,KAAMK,MAEjBP,EAAS,CAAEE,KAAMkC,IAAqBhB,QAASF,EAAIN,QAVR,gDAazCF,EAbyC,sCAahC,KAAKC,gBAb2B,iBAahC,EAAeC,YAbiB,aAahC,EAAqBJ,QACpCA,IAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAhBqB,yDAAxB,uDAoBlB2B,EAAkB,SAACH,EAASC,EAAWG,EAAa9B,GAAlC,8CAA8C,WAAMR,GAAN,mBAAAC,EAAA,sEAGrED,EAAS,CAAEE,KAAMC,MAHoD,SAKnDC,IAAMC,KAAN,UAAcC,IAAd,4BAA8C,CAAE4B,UAASC,YAAWG,cAAa9B,YAL9B,gBAQjER,EAAS,CAAEE,KAAMK,MACjBP,EAASiC,EAAgBC,EAASC,KAT+B,gDAc/DzB,EAd+D,sCActD,KAAKC,gBAdiD,iBActD,EAAeC,YAduC,aActD,EAAqBJ,QACpCA,EAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAjB2C,yDAA9C,uDAsBlB6B,EAAgB,SAACL,EAASC,EAAWK,GAArB,8CAAoC,WAAMxC,GAAN,mBAAAC,EAAA,sEAGzDD,EAAS,CAAEE,KAAMC,MAHwC,SAKvCC,IAAMC,KAAN,UAAcC,IAAd,wBAA0C,CAAE4B,UAASC,YAAWK,eALzB,gBAQrDxC,EAAS,CAAEE,KAAMK,MACjBP,EAASyC,EAAeP,EAASC,KAToB,gDAcnDzB,EAdmD,sCAc1C,KAAKC,gBAdqC,iBAc1C,EAAeC,YAd2B,aAc1C,EAAqBJ,QACpCA,IAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAjB+B,yDAApC,uDAqBhB+B,EAAiB,SAACP,EAASC,GAAV,8CAAwB,WAAMnC,GAAN,qBAAAC,EAAA,sEAG9CD,EAAS,CAAEE,KAAMC,MAH6B,SAK5BC,IAAMC,KAAN,UAAcC,IAAd,wBAA0C,CAAE4B,UAASC,cALzB,QAKxCjB,EALwC,UAQ1ClB,EAAS,CAAEE,KAAMK,MAEjBP,EAAS,CAAEE,KAAMwC,IAA2BtB,QAASF,EAAIN,QAVf,gDAaxCF,EAbwC,sCAa/B,KAAKC,gBAb0B,iBAa/B,EAAeC,YAbgB,aAa/B,EAAqBJ,QACpCA,IAAQK,MAAMH,GAEdI,QAAQC,IAAI,aAAcL,GAhBoB,yDAAxB,wD,iCCvN9B,6DAKMiC,EAAU,CACZ,CACIC,MAAO,cACPC,UAAW,cACXC,IAAK,eAET,CACIF,MAAO,MACPC,UAAW,MACXC,IAAK,OAET,CACIF,MAAO,MACPC,UAAW,MACXC,IAAK,OAET,CACIF,MAAO,QACPC,UAAW,QACXC,IAAK,SAET,CACIF,MAAO,aACPC,UAAW,aACXC,IAAK,aACLC,OAAQ,SAAAC,GAAU,OACd,oCACKA,EAAWtB,KAAI,SAACuB,EAAKtB,GAClB,IAAIuB,EAAQD,EAAIE,OAAS,EAAI,WAAa,QAO1C,OALID,EADAvB,EAAQ,IAAM,EACN,UAGA,WAGR,kBAAC,IAAD,CAAKuB,MAAOA,EAAOJ,IAAKG,GACnBA,EAAIG,qBAO7B,CACIR,MAAO,QACPC,UAAW,QACXC,IAAK,UAwBEO,UAjBf,WACI,IAAMrD,EAAWsD,cACTC,EAAaC,aAAY,qBAAGC,WAA5BF,SACAG,EAAYF,aAAY,qBAAGG,UAA3BD,QAKR,OAHAE,qBAAU,WACN5D,EAASgB,iBACV,IAEC,6BAGI,kBAAC,IAAD,CAAO6C,WAAYN,EAAUZ,QAASA,EAASe,QAASA","file":"static/js/8.bc87c4ca.chunk.js","sourcesContent":["import {\n    CARE_PLAN_FOR_PATIENT,\n    CONVO_PATIENT_ADMIN,\n    FETCH_ERROR,\n    FETCH_START,\n    FETCH_SUCCESS,\n    GET_ALL_PATIENTS,\n    GET_CONVO_LIST,\n    HIDE_MESSAGE,\n    INIT_URL,\n    PROD,\n    SHOW_MESSAGE,\n    SIGNOUT_USER_SUCCESS,\n    SUGGESTIONS_PATIENT_ADMIN,\n    USER_DATA,\n    USER_TOKEN_SET\n} from \"../../constants/ActionTypes\";\nimport axios from 'util/Api'\nimport { message } from \"antd\";\n\n\nexport const addPatient = values => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        const res = await axios.post(`${PROD}/patient/addpatient`, values)\n\n\n\n        if (res) {\n\n            dispatch({ type: FETCH_SUCCESS });\n            message.success(\"Patient Added\")\n        }\n    } catch (err) {\n        const errors = err.response.data;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n\n\n\nexport const getPatients = values => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        const res = await axios.get(`${PROD}/patient/getallpatients`)\n\n\n\n        if (res) {\n\n            dispatch({ type: FETCH_SUCCESS });\n            dispatch({ type: GET_ALL_PATIENTS, payload: res.data })\n        }\n    } catch (err) {\n        const errors = err?.response?.data;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n\n\nexport const addToConvo = (id, name, conditions) => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        let allConditions = [];\n        conditions.map((data, index) => (\n\n            allConditions.push(data)\n\n\n        ))\n        const values = {\n            \"userId\": id,\n            \"patientName\": name,\n            \"Conditions\": allConditions\n\n        }\n\n        const res = await axios.post(`${PROD}/patient/addtoconversation`, values)\n\n\n\n        if (res) {\n\n            dispatch({ type: FETCH_SUCCESS });\n            dispatch(getConvoList())\n            message.success(\"Patient Added\")\n        }\n    } catch (err) {\n        const errors = err?.response?.data;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n\n\n\n\nexport const getConvoList = values => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        const res = await axios.get(`${PROD}/patient/getconversationlist`)\n\n\n\n        if (res) {\n\n            dispatch({ type: FETCH_SUCCESS });\n            dispatch({ type: GET_CONVO_LIST, payload: res.data })\n        }\n    } catch (err) {\n        const errors = err?.response?.data;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n\n\nexport const startingConversation = id => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        const res = await axios.post(`${PROD}/patient/beginconversation`, { id })\n\n        if (res) {\n            dispatch({ type: FETCH_SUCCESS });\n\n            dispatch({ type: CARE_PLAN_FOR_PATIENT, payload: res.data })\n        }\n    } catch (err) {\n        const errors = err?.response?.data?.message;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n\n\nexport const getConversation = (adminId, patientId) => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        const res = await axios.post(`${PROD}/patient/getconversation`, { adminId, patientId })\n\n        if (res) {\n            dispatch({ type: FETCH_SUCCESS });\n\n            dispatch({ type: CONVO_PATIENT_ADMIN, payload: res.data })\n        }\n    } catch (err) {\n        const errors = err?.response?.data?.message;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n\nexport const addConversation = (adminId, patientId, messageFrom, message) => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        const res = await axios.post(`${PROD}/patient/addconversation`, { adminId, patientId, messageFrom, message })\n\n        if (res) {\n            dispatch({ type: FETCH_SUCCESS });\n            dispatch(getConversation(adminId, patientId))\n\n\n        }\n    } catch (err) {\n        const errors = err?.response?.data?.message;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n\n\nexport const suggestionAdd = (adminId, patientId, Suggestion) => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        const res = await axios.post(`${PROD}/users/addsuggestion`, { adminId, patientId, Suggestion })\n\n        if (res) {\n            dispatch({ type: FETCH_SUCCESS });\n            dispatch(getSuggestions(adminId, patientId))\n\n\n        }\n    } catch (err) {\n        const errors = err?.response?.data?.message;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n\nexport const getSuggestions = (adminId, patientId) => async dispatch => {\n\n    try {\n        dispatch({ type: FETCH_START });\n\n        const res = await axios.post(`${PROD}/users/getsuggestion`, { adminId, patientId })\n\n        if (res) {\n            dispatch({ type: FETCH_SUCCESS });\n\n            dispatch({ type: SUGGESTIONS_PATIENT_ADMIN, payload: res.data })\n        }\n    } catch (err) {\n        const errors = err?.response?.data?.message;\n        message.error(errors);\n\n        console.log(\"Error****:\", errors);\n    }\n}\n","import { Table, Tag } from 'antd';\nimport React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getPatients } from '../../appRedux/actions'\n\nconst columns = [\n    {\n        title: 'PatientName',\n        dataIndex: 'PatientName',\n        key: 'PatientName',\n    },\n    {\n        title: 'DOB',\n        dataIndex: 'DOB',\n        key: 'DOB',\n    },\n    {\n        title: 'SSN',\n        dataIndex: 'SSN',\n        key: 'SSN',\n    },\n    {\n        title: 'Email',\n        dataIndex: 'Email',\n        key: 'Email',\n    },\n    {\n        title: 'Conditions',\n        dataIndex: 'Conditions',\n        key: 'Conditions',\n        render: Conditions => (\n            <>\n                {Conditions.map((tag, index) => {\n                    let color = tag.length > 1 ? 'geekblue' : 'green';\n                    if (index % 2 === 0) {\n                        color = 'volcano';\n                    }\n                    else {\n                        color = \"geekblue\"\n                    }\n                    return (\n                        <Tag color={color} key={tag}>\n                            {tag.toUpperCase()}\n                        </Tag>\n                    );\n                })}\n            </>\n        ),\n    },\n    {\n        title: 'Notes',\n        dataIndex: 'Notes',\n        key: 'Notes',\n    },\n];\n\n\n\n\nfunction PatientList() {\n    const dispatch = useDispatch()\n    const { patients } = useSelector(({ patient }) => patient)\n    const { loading } = useSelector(({ common }) => common);\n\n    useEffect(() => {\n        dispatch(getPatients())\n    }, [])\n    return (\n        <div>\n\n\n            <Table dataSource={patients} columns={columns} loading={loading} />\n        </div>\n    )\n}\n\nexport default PatientList\n"],"sourceRoot":""}